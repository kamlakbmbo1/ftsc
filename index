
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Frequency to Scale Converter</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
  <style>
    :root {
      --primary: #000;
      --background: #fff;
      --accent: #e53935;
      --font: 'Helvetica Neue', Arial, sans-serif;
      --grid: 8px;
    }
    body {
      background: var(--background);
      color: var(--primary);
      font-family: var(--font);
      margin: 0;
      padding: var(--grid);
      min-height: 100vh;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      padding: calc(var(--grid) * 3);
    }
    h1 {
      font-size: 1.5rem;
      font-weight: 500;
      letter-spacing: 0.05em;
      text-transform: uppercase;
      margin-bottom: calc(var(--grid) * 3);
    }
    .controls {
      display: flex;
      flex-wrap: wrap;
      gap: calc(var(--grid) * 2);
      margin-bottom: calc(var(--grid) * 3);
    }
    .control-group {
      display: flex;
      align-items: center;
      gap: var(--grid);
    }
    label {
      font-size: 0.9rem;
      letter-spacing: 0.03em;
    }
    input[type="number"] {
      width: 80px;
      padding: calc(var(--grid) * 0.75);
      border: 1px solid var(--primary);
      font-family: monospace;
    }
    button {
      padding: calc(var(--grid) * 1) calc(var(--grid) * 2);
      background: var(--background);
      color: var(--primary);
      border: 1px solid var(--primary);
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      cursor: pointer;
    }
    .freq-inputs {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      margin-bottom: calc(var(--grid) * 3);
    }
    .freq-input {
      width: 80px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: calc(var(--grid) * 3);
      font-family: monospace;
    }
    th, td {
      padding: calc(var(--grid) * 1.5);
      text-align: right;
      border-bottom: 1px solid var(--primary);
    }
    th {
      font-weight: 500;
      text-transform: uppercase;
      letter-spacing: 0.04em;
    }
  </style>
</head>
<body>
  <div id="app">
    <div class="container">
      <h1>Frequency to Scale Converter</h1>
      
      <div class="controls">
        <div class="control-group">
          <label>Notes:</label>
          <input type="number" min="1" v-model.number="noteCount">
        </div>
        <div class="control-group">
          <input type="checkbox" id="addOctave" v-model="addOctave">
          <label for="addOctave">Add Octave</label>
        </div>
        <button @click="process">Process</button>
        <button @click="exportScale" :disabled="!results.length">Export .scl</button>
        <button @click="exportKBM" :disabled="!results.length">Export .kbm</button>
      </div>
      
      <div class="freq-inputs">
        <div v-for="(freq, index) in frequencies" :key="index" class="freq-input">
          <input type="number" min="1" v-model.number="frequencies[index]" :placeholder="'F' + (index + 1)">
        </div>
      </div>
      
      <table v-if="results.length">
        <thead>
          <tr>
            <th>Note</th>
            <th>Frequency (Hz)</th>
            <th>Cents</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="(note, index) in results" :key="index">
            <td>{{ index + 1 }}</td>
            <td>{{ note.frequency.toFixed(2) }}</td>
            <td>{{ note.cents.toFixed(2) }}</td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>

  <script>
    const { createApp } = Vue;
    
    createApp({
      data() {
        return {
          noteCount: 12,
          addOctave: false,
          frequencies: Array(12).fill(440),
          results: []
        }
      },
      watch: {
        noteCount(newVal) {
          this.frequencies = Array(newVal).fill(440);
          if (this.addOctave) {
            this.frequencies.push(this.frequencies[0] * 2);
          }
        },
        addOctave(newVal) {
          if (newVal) {
            this.frequencies.push(this.frequencies[0] * 2);
          } else {
            this.frequencies.pop();
          }
        }
      },
      methods: {
        process() {
          const baseFreq = Math.min(...this.frequencies.filter(f => f > 0));
          this.results = this.frequencies
            .filter(f => f > 0)
            .map(f => {
              let foldedFreq = f;
              while (foldedFreq > baseFreq * 2) foldedFreq /= 2;
              while (foldedFreq < baseFreq) foldedFreq *= 2;
              const cents = 1200 * Math.log2(foldedFreq / baseFreq);
              return { frequency: foldedFreq, cents: cents };
            })
            .sort((a, b) => a.frequency - b.frequency);
        },
        exportScale() {
          const baseFreq = Math.min(...this.frequencies.filter(f => f > 0));
          const exportResults = this.results.filter(n => n.cents !== 0);
          let content = `! Frequency to Scale Converter\n!\n${exportResults.length}\n!\n`;
          exportResults.forEach(note => {
            content += `${note.cents.toFixed(5)}\n`;
          });
          const blob = new Blob([content], { type: 'text/plain' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = 'scale.scl';
          a.click();
          URL.revokeObjectURL(url);
        },
        exportKBM() {
          const baseFreq = Math.min(...this.frequencies.filter(f => f > 0));
          let content = [
            "File generated by Frequency to Scale Converter",
            "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
            "440.00000", "69", "0", "0", "0", "0", "0"
          ].join("\n");
          const blob = new Blob([content], { type: 'text/plain' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = 'tuning.kbm';
          a.click();
          URL.revokeObjectURL(url);
        }
      }
    }).mount('#app');
  </script>
</body>
</html>
